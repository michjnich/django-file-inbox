[project]
name = "django-file-inbox"
version = "0.1.0"
authors = [{ name = "Michael J. Nicholson", email = "michjnich@outlook.com" }]
description = "Simple inbox for Django file-based EmailBackend"
dependencies = ["django~=4.0"]
requires-python = ">=3.10,<4.0"
readme = "README.md"
license = { text = "MIT" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Django",
]

[project.urls]
"Homepage" = "https://github.com/michjnich/django-file-inbox"
"Issue Tracker" = "https://github.com/michjnich/django-file-inbox/issues"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]

[tool.pdm.dev-dependencies]
lint = ["ruff~=0.1.5"]
dev = []
type = ["mypy~=1.7.0", "django-stubs~=4.2.6"]

[tool.pdm.build]
includes = ["src/django_file_inbox"]
excludes = ["src/templates/django_file_inbox/processed/*.html"]

[tool.pdm.scripts]
# Linting
lint_version = { cmd = "ruff --version" }
lint_check_cmd = { shell = "ruff check src && echo 'No linting issues found'" }
lint_fix_cmd = { shell = "ruff check --fix src && echo 'No linting issues found'" }
format_version = { cmd = "ruff --version" }
format_check_cmd = "ruff format --check src"
format_fix_cmd = "ruff format src"
# Type checking
type_version = { cmd = "mypy --version" }
type_check_cmd = "mypy ./src"
# Check commands
check_format = { composite = ["format_version", "format_check_cmd"] }
check_lint = { composite = ["lint_version", "lint_check_cmd"] }
check_type = { composite = ["type_version", "type_check_cmd"] }
check = { composite = ["check_format", "check_lint", "check_type"] }
# Fix commands
fix_format = { composite = ["format_version", "format_fix_cmd"] }
fix_lint = { composite = ["lint_version", "lint_fix_cmd"] }
fix = { composite = ["fix_format", "fix_lint"] }

[tool.ruff]
select = [
    "E",    # Pycodestyle
    "F",    # Pyflakes
    "I",    # Isort
    "C90",  # McCabe complexity
    "N",    # PEP8 naming convention
    "UP",   # Pyupgrade
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "DJ",   # flake8-django
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-string-concat
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLOT", # flake8-slot
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "TD",   # flake8-todo
    "ERA",  # flake8-eradicate
    "PL",   # pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # ruff specific rules
]
ignore = [
    "TD002",  # Missing author in TODO
    "TD003",  # Missing issue link on the line following this TODO
    "RUF012", # Flags issues in installed paskages (eg, Django's UniqueConstraint) - turn off for now
    "ISC001", # Implicit string concatenation, disabled on advice from ruff that it may conflict with formatter
]
fixable = ["ALL"]
preview = true
line-length = 120
target-version = "py311"
src = ["src"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101", # assert statements allowed in tests
    "ARG",  # Unused function args -> fixtures nevertheless are functionally relevant
    "FBT",  # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
]

[tool.ruff.format]

[tool.ruff.isort]
section-order = [
    "future",
    "pytest",
    "standard-library",
    "django",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.isort.sections]
"django" = ["django"]
"pytest" = ["pytest", "pytest_django"]
